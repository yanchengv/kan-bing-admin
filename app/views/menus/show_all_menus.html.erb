<%#= stylesheet_link_tag    'ui-dialog' %>
<%#= javascript_include_tag 'dialog-min' %>
<style>
    div.left{float: left;width: 250px !important;}
    div.right{float: left;width: 200px !important;}
    ul.ztree {margin-top: 10px;border: 1px solid #617775;background: #f0f6e4;width:220px;height:360px;overflow-y:scroll;overflow-x:auto;}
    .select2-container{
        width:170px;

    }
    ul li span.button.add { margin-left: 2px; margin-right: -1px; background-position: -144px 0; vertical-align: top; *vertical-align: middle; }
</style>

<SCRIPT type="text/javascript">
    <!--
    var log, className = "dark";
    var setting = {
        check: {
            enable: true,
                chkStyle: "checkbox",
                chkboxType: { "Y": "ps", "N": "ps" }
        },
        view:{
            addHoverDom:addHoverDom,
            removeHoverDom:removeHoverDom,
            selectedMulti:false
        },
        edit: {
            enable: true,
            showRemoveBtn: setRemoveBtn,
            showRenameBtn: showRenameBtn,
            removeTitle: "删除节点",
            renameTitle: "编辑节点",
            drag:{
                prev:false,
                inner:per_inner,
                next:false,
                isCopy:true,
                isMove:true
            }
        },
        data: {
            simpleData: {
                enable: true
            }
        },
        callback: {
            /*编辑与删除回调*/
            beforeEditName: beforeEditName,
            beforeRemove: beforeRemove,
            beforeRename: beforeRename,
            onRemove: onRemove,
            onRename: onRename,
            onClick:onClick,
//            onCheck:onCheck,
            beforeDrag: beforeDrag,
//            onDrag: zTreeOnDrag,
            beforeDrop: beforeDrop,
            onDrop: onDrop
//            beforeRemove:beforeRemove,
//            onRemove:onRemove
        }
    };

    var roleSetting = {
        check: {
            enable: true,
            chkStyle: "checkbox",
            chkboxType: { "Y": "ps", "N": "ps" }
        },
        view:{
            addHoverDom:addHoverDom2,
            removeHoverDom:removeHoverDom,
            selectedMulti:false
        },
        edit: {
            enable: true,
            showRemoveBtn: setRemoveBtn,
            showRenameBtn: showRenameBtn2,
            drag:{
                prev:false,
                inner:inner,
                next:false,
                isCopy:false,
                isMove:false
            }
        },
//        async: {
//            //异步加载
//            enable: true,
//            url: "/menus/show_all_menus",
//            autoParam: ["id", "pId", "name"]
//        },
        data: {
            simpleData: {
                enable: true
            }
        },
        callback: {
//            beforeDrag: beforeDrag,
//            beforeDrop: beforeDrop,
            beforeEditName: beforeEditName,
            beforeRemove: beforeRemove,
//            beforeRename: beforeRename,
            onRemove:onRemove2,
            onRename:onRename2
        }
    };
    function showRenameBtn(treeId, treeNode){
        var treeObj = $.fn.zTree.getZTreeObj(treeId);
        if ((''+treeNode.id).indexOf("_") > 0 || treeNode.level==0) {
            return false
        }else{
            return true
        }
    }
    function showRenameBtn2(treeId, treeNode){
        if (treeNode.level==1) {
            return true
        }else{
            return false
        }
    }
    var newCount = 1;
    function addHoverDom(treeId,treeNode){
        if ((''+treeNode.id).indexOf("_") > 0) {
        }else{
        var sObj = $("#" + treeNode.tId + "_span");
        if (treeNode.editNameFlag || $("#addBtn_"+treeNode.tId).length>0) return;
        var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
                + "' title='添加子节点' onfocus='this.blur();'></span>";
        sObj.after(addStr);
        }
        var btn = $("#addBtn_"+treeNode.tId);
        if (btn) btn.bind("click", function(){
            var zTree=$.fn.zTree.getZTreeObj(treeId)
//            $('#create_or_edit_form').modal('show')
            //在这里向后台发送请求保存一个新建的叶子节点，父id为treeNode.id,让后将下面的100+newCount换成返回的id
//            zTree.addNodes(treeNode, {id:(100 + newCount), pId:treeNode.id, name:"新建节点" + (newCount++)});
//            alert(treeNode.id)
            create_child_menus(treeId,treeNode)
//            if (treeNode.level==0){
//                create_child_menus(treeId,treeNode)
//            }else{
//                var d0 = dialog({
//                    title:'新建子节点',
//                    content:'选择子节点类型',
//                    cancelValue: '取消',
//                    cancel: function () {},
//                    button: [
//                        {   value:'添加子菜单',
//                            callback: function () {
//                                create_child_menus(treeId,treeNode)
//                                return;
//                            },
//                            autofocus: true
//                        },
////                        {   value: '添加操作',
////                            callback: function () {
////                                create_child_operation(treeId,treeNode)
////                            },
////
////
////                            autofocus: true
////                        }
//                    ]
//                }).show();
//            }

            return false;
        });
    }
    function addHoverDom2(treeId,treeNode){
        if (treeNode.level == 0) {
            var sObj = $("#" + treeNode.tId + "_span");
            if (treeNode.editNameFlag || $("#addBtn_"+treeNode.tId).length>0) return;
            var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
                    + "' title='添加子节点' onfocus='this.blur();'></span>";
            sObj.after(addStr);
        }
        var btn = $("#addBtn_"+treeNode.tId);
        if (btn) btn.bind("click", function() {
            var zTree = $.fn.zTree.getZTreeObj(treeId)
            var d2 = dialog({
                title:'新建子节点',
                content:'<%= form_for('@menu',remote:true,html:{id:'doc_form'}) do |f| %><%= f.label :角色名 %><%= f.text_field :name,id:'role2_name',name:'name',class:"form-control"%><%= f.label :英文代称 %><%= f.text_field :code,id:'role2_code',name:'code',class:"form-control"%><%= f.label :说明 %><%= f.text_field :instruction,id:'role2_instruction',name:'instruction',class:"form-control"%></div><% end %>',
                okValue: '确定',
                ok: function () {
                    $.ajax({
                        type: 'post',
                        url: '/role2s',
                        data: {name:$('#role2_name').val(),code:$('#role2_code').val(),instruction:$('#role2_instruction').val()},
                        success: function (data, response) {
                            if (data['success']) {
                                zTree.addNodes(treeNode, data['data']);
                                d2.close().remove()
                            }else{
                                alert(data['error'])
                            }
                        },
                        error: function () {
                        }
                    })
                    return false;
                },
                cancelValue: '取消',
                cancel: function () {}
            }).show();
        })
    }
    function create_child_menus(treeId,treeNode){
        var zTree=$.fn.zTree.getZTreeObj(treeId)
        var dl = dialog({
            title:'新建子节点',
            id: 'testID',
            content: '<%= form_for('@menu',remote:true,html:{id:'doc_form'}) do |f| %><%= f.label :名称 %><div id="menus_name"><%= render partial: 'menus/form_name' %></div></div><%= f.label :操作 %><div id="menus_priority"><%= render partial: 'menus/form_priority' %></div><%= f.label :URI %><%= f.text_field :uri,id:'menu_uri',name:'uri',value:"/",class:"form-control"%></div><% end %>',
            okValue: '确定',
            ok: function () {
                $.ajax({
                    type: 'post',
                    url: '/menus',
                    data: {parent_id:treeNode.id,name:$('#menu_name').val(),hospital_id:$('#menu_hospital_id').val(),department_id:$('#menu_department_id').val(),parent_name:treeNode.id,uri:$('#menu_uri').val(),priority:$('#menu_priorities').val()},
                    success: function (data, response) {
                        if (data['success']) {
                            var child = treeNode.children
                            for (var j = child.length - 1; j >= 0; j--) {
                                if (('' + child[j].id).indexOf("_") > 0) {
                                    zTree.removeNode(child[j]);
                                }
                            }
                            zTree.addNodes(treeNode, data['data']);
                            dl.close().remove()
                        }else{
                            alert(data['data'])
                        }
                    },
                    error: function () {
                    }
                })
                return false;
            },
//            button:[
//                {
//                    value: '确定',
//                    callback: function () {
//
//
//                    },
//                    disabled: true,
//                    autofocus: true
//                },
//            ],

            cancelValue: '取消',
            cancel: function () {}
        }).width(320).show();
    }
    function create_child_operation(treeId,treeNode){
        var zTree=$.fn.zTree.getZTreeObj(treeId)
        dialog({
            title:'新建子节点',
            id: 'testID',
            content: '名称:<input class="form-control" type="text" value="'+treeNode.name+'" readonly/><%= form_for('@menu',remote:true,html:{id:'doc_form'}) do |f| %><%= f.label :操作 %><div id="menus_priority"><%= render partial: 'menus/form_priority' %></div></div><% end %>',
            okValue: '确定',
            ok: function () {
                $.ajax({
                    type: 'post',
                    url: '/menu_permissions/create_by_menu',
                    data: {menu_id:treeNode.id,priority:$('#menu_priorities').val()},
                    success: function (data, response) {
                        console.log(data)
                        var data = data['priorities']
                        for(var i=0;i<data.length;i++){
                            var s = zTree.getNodesByParam("id", data[i].id,treeNode);
                            if (s.length==0) {
                                zTree.addNodes(treeNode, data[i]);
                            }
                        }
                    },
                    error: function () {

                    }
                })
//                return false;
            },
            cancelValue: '取消',
            cancel: function () {}
        }).width(320).show();
    }
    function removeHoverDom(treeId,treeNode){
        $("#addBtn_"+treeNode.tId).unbind().remove();
    }

    function onClick(event, treeId, treeNode) {
        var treeObj = $.fn.zTree.getZTreeObj(treeId);
        var tree_node = treeNode
        while (tree_node.level > 0){
//            if (tree_node.level > 0){
                tree_node.checked=true
                treeObj.updateNode(tree_node);
                tree_node = tree_node.getParentNode()
//            }

        }
        var child_nodes=[]
        var child_nodes=getChildren(child_nodes,treeNode);
        for (var i=0; i<child_nodes.length;i++){
            child_nodes[i].checked=true
            treeObj.updateNode(child_nodes[i]);
        }
    }

    function getChildren(child_nodes,treeNode){  //获取所有子结点
        child_nodes.push(treeNode);
        if (treeNode.isParent){
            for(var obj in treeNode.children){
                getChildren(child_nodes,treeNode.children[obj]);
            }
        }
        return child_nodes;
    }

    function zTreeOnDrag(event, treeId, treeNodes) {
        alert(treeNodes[0].id);
    };

    function inner(treeId,treeNodes,targetNode){     //目标结点必须是根结点以外的
        if(targetNode.level>0){
            return true
        }else{
            return false
        }

    }
    function per_inner(treeId,treeNodes,targetNode){
        if ((''+(treeNodes[0].id)).indexOf("_")>0 || (''+(targetNode.id)).indexOf("_")>0) {
            return false;
        }
        return true;
    }
    function setRemoveBtn(treeId, treeNode) {  //判断是否为根结点,根结点不可删除
        if (treeNode.level == 0)
            return false;
        else
            return true;
    }
    function beforeDrag(treeId, treeNodes){
        for (var i=0,l=treeNodes.length; i<l; i++) {
            if (treeNodes[i].drag === false) {
                return false;
            }
        }
        var treeObj=$.fn.zTree.getZTreeObj("perTree"),
                nodes2=treeObj.getCheckedNodes(true);
//        if (nodes2.length==0){
//            alert('请勾选后拖拽!')
//            return false;
//        }
        return true;
    }

    function beforeDrop(treeId, treeNodes, targetNode, moveType) {
        var drag_id
        drag_id=treeNodes[0]['id'] //获取被拖拽的id
        var treeObj = $.fn.zTree.getZTreeObj(treeId);
        var nodes = treeObj.getNodesByParam("id", drag_id,targetNode);    //查找用户是否已经存在此菜单节点
        if( treeId == 'roleTree'){
            var right_treeObj = $.fn.zTree.getZTreeObj(treeId);
            var treeObj=$.fn.zTree.getZTreeObj("perTree"),
                    nodes2=treeObj.getCheckedNodes(true);
            var target_node = targetNode
            var target_Node = null
            while (target_node.getParentNode()!=null){
                if (target_node.level==1){
                    target_Node = target_node
                }
                target_node = target_node.getParentNode()
            }
            var tree_nodes = []
            var tree_node = treeNodes[0]
            while (tree_node.getParentNode()!=null){
                tree_node = tree_node.getParentNode()
                if (tree_node.level>0){
                    tree_nodes.push(tree_node)
                }
            }
            var child_nodes = []
            for (var i=tree_nodes.length-1;i>=0;i--){
                child_nodes.push(tree_nodes[i])
            }
            var trees = []
            nodes2=child_nodes.concat(getChildren(trees,treeNodes[0]))
//            for (var obj in child_nodes){
//                alert(child_nodes[obj].name)
//            }
//            alert(target_Node.name)
            var nodes = right_treeObj.getNodesByParam("id", drag_id,target_Node);
            if (nodes.length==0) {
                if (true) {
                    var right_parent_nodes = right_treeObj.getNodesByParam("id", treeNodes[0].pId, target_Node);
                    var param_nodes = []
                    var tree_nodes=[]
                    var flag=true
                    for (var i = 0; i < nodes2.length; i++) {
                        if (nodes2[i].level>0) {
                            var node_i = {id: nodes2[i].id, name: nodes2[i].name, pId: nodes2[i].pId, menu_permission_id: nodes2[i].menu_permission_id}
                            var is_right_nodes = right_treeObj.getNodesByParam("id", nodes2[i].id, target_Node);
                            if (is_right_nodes.length == 0) {
                                tree_nodes.push(node_i)
                            } else {
                                flag = false
                            }
                            param_nodes.push(node_i)
                        }
                    }
                    if (flag){
                        alert('a')
                        right_treeObj.addNodes(target_Node, tree_nodes);
                    }else{
                        alert('b')
                        var first_nodes = right_treeObj.getNodesByParam("id", tree_nodes[0].pId, target_Node);
                        right_treeObj.addNodes(first_nodes[0], tree_nodes);
                    }

                    var nodes3=right_treeObj.getNodesByParam("id", treeNodes[0].id, targetNode);
                    if (nodes3.length > 0) {
                        $.ajax({
                            type: 'post',
                            url: '/menus/drag',
                            data: {data: param_nodes, targetNode: targetNode, nodes: treeNodes},
                            success: function (data, response) {
                            },
                            error: function () {

                            }
                        })
                    }
                    return false;
                }


                return targetNode ? targetNode.drop !== false : true;
            } else {
                alert('存在')
                return false;
            }
        }else{
            if ((''+(treeNodes[0].id)).indexOf("_")>0) {
                return false;
            }
            var is_exists = false
            var tar_child = targetNode.children
            for(var obj in tar_child){
                if (tar_child[obj].id == (treeNodes[0].id)) {
                  is_exists = true
                }
            }
            if (!is_exists) {
                $.ajax({
                    type: 'post',
                    url: '/menus/drag2',
                    data: {targetNode: targetNode.id, nodes: treeNodes[0].id},
                    success: function (data, response) {
                    },
                    error: function () {

                    }
                })
                return targetNode ? targetNode.drop !== false : true;
            }else{
                alert('存在')
                return false;
            }
        }

    };

    function onDrop(event, treeId, treeNodes, targetNode, moveType){
        var treeObj=$.fn.zTree.getZTreeObj("perTree"),
                nodes2=treeObj.getCheckedNodes(true);
        var right_treeObj = $.fn.zTree.getZTreeObj("roleTree");
//        判断是否拖拽成功
        var nodes=right_treeObj.getNodesByParam("id", treeNodes[0].id, null);
        var param_nodes = []
        for (var i = 0; i < nodes2.length; i++) {
            var node_i = {id: nodes2[i].id, name: nodes2[i].name, pId: nodes2[i].pId}
            var is_right_nodes = right_treeObj.getNodesByParam("id", nodes2[i].id, targetNode);
            param_nodes.push(node_i)
        }
        if (nodes.length>0) {
            $.ajax({
                type: 'post',
                url: '/menus/drag',
//                data: {data: param_nodes,targetNode:targetNode,nodes:treeNodes},
                success: function (data, response) {
//                    right_treeObj.reAsyncChildNodes
//                    right_treeObj.refresh();
//                    $.fn.zTree.init($("#roleTree"), roleSetting, roleNodes);
                },
                error: function () {

                }
            })
        }
    } ;

    function update_menus(treeId,treeNode){
        var zTree=$.fn.zTree.getZTreeObj(treeId)
        var dg = dialog({
            title:'新建子节点',
            id: 'testID',
            content: '名称:<input class="form-control" id="edit_menus_name" type="text" value="'+treeNode.name+'"/><%= form_for('@menu',remote:true,html:{id:'doc_form'}) do |f| %><%= f.label :操作 %><div id="menus_priority"><%= render partial: 'menus/form_priority' %></div></div><% end %>',
            okValue: '确定',
            ok: function () {
                $.ajax({
                    type: 'post',
                    url: '/menu_permissions/create_by_menu',
                    data: {name:$('#edit_menus_name').val(),menu_id:treeNode.id,priority:$('#menu_priorities').val()},
                    success: function (data, response) {
                        if (data['success']) {
                            console.log(data)
                            treeNode.name = data["menu"]["name"]
                            zTree.updateNode(treeNode);
                            var child = treeNode.children
                            for (var j = child.length - 1; j >= 0; j--) {
                                if (('' + child[j].id).indexOf("_") > 0) {
                                    zTree.removeNode(child[j]);
                                }
                            }
                            var data = data["priorities"]
                            for(var i=0;i<data.length;i++){
                                var s = zTree.getNodesByParam("id", data[i].id,treeNode);
                                if (s.length==0) {
                                    zTree.addNodes(treeNode, data[i]);
                                }
                            }
                            dg.close().remove()
                        }else{
                            alert(data['error'])
                        }

                    },
                    error: function () {

                    }
                })
                return false;
            },
            cancelValue: '取消',
            cancel: function () {}
        }).width(320).show();
    }

    function beforeEditName(treeId, treeNode) {
//        className = (className === "dark" ? "" : "dark");
//        var zTree = $.fn.zTree.getZTreeObj(treeId);
//        zTree.selectNode(treeNode);
//        return confirm("进入节点 -- " + treeNode.name + " 的编辑状态吗？");
        update_menus(treeId,treeNode)
        beforeRename(treeId, treeNode,$('#edit_menus_name').val() , false)
        return false
    }

    function beforeRename(treeId, treeNode, newName, isCancel) {
        className = (className === "dark" ? "" : "dark");
        if (newName.length == 0) {
            alert("节点名称不能为空.");
            var zTree = $.fn.zTree.getZTreeObj(treeId);
            setTimeout(function () { zTree.editName(treeNode) }, 10);
            return false;
        }
        return true;
    }

    function onRename(e, treeId, treeNode, isCancel) {
        var zTree = $.fn.zTree.getZTreeObj(treeId);
        $.ajax({
            url: '/menus/update_name', //url  action是方法的名称
            data: { id: treeNode.id, name: treeNode.name },
            type: 'PUT',
            success: function (data) {
               alert('"'+data.name+'"保存成功!')
            }
        });
        return false;

    }
    function onRename2(e, treeId, treeNode, isCancel) {
        var zTree = $.fn.zTree.getZTreeObj(treeId);
        $.ajax({
            url: '/role2s/update_name', //url  action是方法的名称
            data: { id: treeNode.id, name: treeNode.name },
            type: 'PUT',
            success: function (data) {
                alert('"'+data.name+'"保存成功!')
            }
        });
        return false;

    }

    //    删除之前的确定操作
    function beforeRemove(treeId, treeNode){
        alert(treeNode.isParent ? "确定删除父节点？":"确定删除此节点？")
    };
    function onRemove(event, treeId, treeNode) {
//        alert(treeNode)
//        var nodes=new Array();
        var tree_node = {id:treeNode.id,name:treeNode.name,menu_permission_id:treeNode.menu_permission_id}
//        nodes.push(tree_node)
        $.ajax({
            type:'delete',
            url:'/menus/remove_nodes2',
            data: {data: tree_node},
            success: function (data, response) {

            }
        })
    }
    function onRemove2(event, treeId, treeNode){
        var right_treeObj = $.fn.zTree.getZTreeObj("roleTree");
        var target_node,tree_node = treeNode
        while (tree_node!=null){
            if (tree_node.level==1){
                target_node = tree_node
            }
            tree_node = tree_node.getParentNode()
        }
        target_node = {id:target_node.id,name:target_node.name}
        //注释部分:当父结点的子结点为空时,同时删除父结点
        if (treeNode.getParentNode().level!=0&&treeNode.getParentNode().level!=1&&treeNode.getParentNode().children.length==0){
            right_treeObj.removeNode(treeNode.getParentNode());
            right_treeObj.removeNode(treeNode);
        }else{
//            alert(treeNode.getParentNode().children.length)
        }
//        var nodeIds=new Array();
//        if (treeNode.isParent){
//            var right_treeObj = $.fn.zTree.getZTreeObj("roleTree");
//            var childNodes = right_treeObj.removeChildNodes(treeNode);
//            var all_childNodes = []
//            var all_childNodes  = getChildren(all_childNodes,treeNode)
////            var menu_permission_ids = treeNode.menu_permission_id
////            for (var j = 0; j < menu_permission_ids.length; j++){
////                nodeIds.push(menu_permission_ids[j]);
////            }
////            nodeIds.push(treeNode.menu_permission_id.join(","))
//            for(var i = 0; i < all_childNodes.length; i++){
//                alert(all_childNodes[i].name)
//                var menu_permission_ids = all_childNodes[i].menu_permission_id;
//                for (var j = 0; j < menu_permission_ids.length; j++){
//                    nodeIds.push(menu_permission_ids[j]);
//                }
//
//            }
//        }else{
//            var menu_permission_ids = treeNode.menu_permission_id
//            for (var j = 0; j < menu_permission_ids.length; j++){
//                nodeIds.push(menu_permission_ids[j]);
//            }
////            nodeIds.push(treeNode.menu_permission_id)
//        };
        var tree_node = {id:treeNode.id,name:treeNode.name,pId:treeNode.pId,menu_permission_id:treeNode.menu_permission_id}
        $.ajax({
            type:'post',
            url:'/menus/remove_nodes',
            data: {data: tree_node,targetNode:target_node},
            success: function (data, response) {

            }
        })
    }




    //    var perNodes =[
//        { id:1, pId:0, name:"权限管理", open:true},
//        { id:2, pId:1, name:"字典管理"},
//        { id:3, pId:1, name:"医院管理"},
//        { id:5, pId:1, name:"视频管理"},
//        { id:6, pId:1, name:"文章管理"},
//        { id:7, pId:1, name:"孕育知识管理"},
//        { id:8, pId:1, name:"用户管理"},
//        { id:9, pId:3, name:"清华大学玉泉医院"},
//        { id:10, pId:3, name:"武警总医院"},
//        { id:11, pId:3, name:"海南省人民医院"},
//        { id:12, pId:3, name:"海南省第二人民医院"},
//        { id:13, pId:3, name:"东方市人民医院"},
//
//        { id:19, pId:23, name:"添加"},
//        { id:20, pId:23, name:"删除"},
//        { id:21, pId:23, name:"修改"},
//        { id:22, pId:23, name:"查看"},
//        { id:23, pId:9, name:"医生"},
//        { id:24, pId:9, name:"患者"},
//
//        { id:25, pId:24, name:"添加"},
//        { id:26, pId:24, name:"删除"},
//        { id:27, pId:24, name:"修改"},
//        { id:28, pId:24, name:"查看"},
//
//
//        { id:29, pId:10, name:"医生"},
//        { id:30, pId:10, name:"患者"},
//        { id:31, pId:29, name:"添加"},
//        { id:32, pId:29, name:"删除"},
//        { id:33, pId:29, name:"修改"},
//        { id:34, pId:29, name:"查看"},
//
//        { id:35, pId:30, name:"添加"},
//        { id:36, pId:30, name:"删除"},
//        { id:37, pId:30, name:"修改"},
//        { id:38, pId:30, name:"查看"},
//
//        { id:39, pId:2, name:"省市县字典"},
//        { id:40, pId:2, name:"医院字典"},
//
//
//        { id:41, pId:39, name:"添加"},
//        { id:42, pId:39, name:"删除"},
//        { id:43, pId:39, name:"修改"},
//        { id:44, pId:39, name:"查看"}
//
////        { id:24, pId:10, name:"添加"},
////        { id:25, pId:10, name:"删除"},
////        { id:26, pId:10, name:"修改"},
////        { id:27, pId:10, name:"查看"}
//    ];
//
//    var roleNodes=[
//        {id:1,pId:0,name:"系统角色"},
//        {id:2,pId:1,name:"系统管理员"},
//        {id:3,pId:1,name:"超级管理员"},
//        {id:4,pId:1,name:"普通管理员"},
//        {id:5,pId:1,name:"玉泉医院管理员"},
//        {id:6,pId:1,name:"武警总医院管理员"}
//    ]

    var perNodes=<%= raw @total_menus.to_json %>
    var roleNodes=<%= raw @all_roles.to_json %>
    $(document).ready(function(){
        $.fn.zTree.init($("#perTree"), setting, perNodes);
        $.fn.zTree.init($("#roleTree"), roleSetting, roleNodes);
    });
    //-->
</SCRIPT>



<div class="zTreeDemoBackground left">
  系统权限：
  <ul id="perTree" class="ztree"></ul>
</div>

<div class="pull-left" style="height:360px;line-height:360px;font-size:24px;margin-right:15px;"><span class="glyphicon glyphicon-resize-horizontal"></span></div>
<div class="right">
  系统角色：
  <ul id="roleTree" class="ztree"></ul>
</div>

<div class="modal fade" id="create_or_edit_form" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title"><b>创建或编辑</b></h4>
      </div>
      <div class="modal-body">
        <%= form_for('@menu',remote:true,html:{id:'doc_form'}) do |f| %>
            <%= f.label :名称 %>
            <div id="menus_parent_menu"><%#= render partial: 'menus/form_name' %></div>
            <%= f.label :父菜单 %>
            <div id="menus_parent_menu"><%#= render partial: 'menus/form_parent_menu' %></div>
            <%= f.label :操作 %>
            <div id="menus_priority"><%#= render partial: 'menus/form_priority' %></div>
            <%= f.label :URI %>
            <%= f.text_field :uri,name:'uri' ,class:"form-control"%>
      </div>
      <div class="modal-footer">
          <%= f.submit '确定',id:'new_or_edit_submit',class:"btn btn-primary",onclick:'create_or_update()'%>
          <button type="button" class="btn btn-default" data-dismiss="modal">关闭</button>
      </div>
        <% end %>
    </div>
  </div>
</div>